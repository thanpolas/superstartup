#!/bin/bash
###
### Automatically push to production and staging installations
###

### Error handling
function catchErrors()
{
  local exit_status=${1:-$?}
  echo "********** WARNING WARNING WARNING **************"
  echo "*** Deployment FAILED Exiting" $0 with $exit_status
  exit $exit_status
}
trap 'catchErrors' ERR
set -e

### Get current branch that was pushed
ref=$1

###
### SETTINGS AND PATHS
###
### Set branches that we will trigger on
live="refs/heads/master"
staging="refs/heads/next"

### Set paths here
masterRoot="/home/thanpolas/"
livePath=$masterRoot"web/superstartup.org"
stagingPath=$masterRoot"web/staging.superstartup.org"

binPath="engine/bin"

# set deployment preparation paths
deployRootPath=$masterRoot"deploy/"
deployPath=$deployRootPath"deployments/"
configLive=$deployRootPath"config/production/"
configStaging=$deployRootPath"config/staging/"
gitPrototype=$deployRootPath"dummyGit"

# Set path to CI's root and config folder
CIrootPath="engine/CI/origin"
CIconfigPath="engine/CI/origin/application/config"


# Set where CI's environment PHP file is (included by index.php)
# This file should be included in the .gitignore file to avoid
# merge conflicts. We overwrite this file on each push
envFile="/html/php/env.php"

# Set the location of the post-update script. git repo will ln -s to this
postUpdate="engine/bin/git/post-update"

### Set string to echo on environment file depending on environment
envPHPmaster="<?php define('ENVIRONMENT', 'production'); ?>"
envPHPbeta="<?php define('ENVIRONMENT', 'staging'); ?>"

###
### SCRIPT STARTS HERE
###
### Check if we got 'beta' or 'master' branches pushed
### and update live installations

echo "*** Checking if pushed branch is next or master..."

if [ "$ref" = "$live" ]
then
  echo "*** master branch pushed. Deploying on LIVE site"
  
  # create a new path to deploy, based on Year-Month-Day-Hour-Minute-Second
  timestampPath=$(date +"%Y%m%d%H%M%S")
  newFullPath=$deployPath"superstartup_"$timestampPath"/"
  echo "*** Creating new deployment in folder: "$newFullPath
  # copy our git prototype there
  cp -R $gitPrototype $newFullPath
  
  cd $newFullPath
  env -i git pull origin master
  ## init and update submodules
  echo "*** Updating submodules..."
  env -i git submodule init
  env -i git submodule update
  # init CI's submodules  
  echo "*** Updating CI's submodules..."
  cd $newFullPath$CIrootPath
  env -i git submodule init
  env -i git submodule update
  # overwrite our config file
  echo "*** Overwriting LIVE config files..."
  cp -fR $configLive $newFullPath$CIconfigPath
  
  ### Secure environment after the pull
  echo $envPHPmaster > $newFullPath$envFile
  
  ### Make post-update executable, git repo's hook is linked
  ### to this file
  chmod a+x  $newFullPath$postUpdate

  ### CWD to bin and compile js / css and increase file counter...
  echo "*** Compiling JS..."$newFullPath$binPath
  cd $newFullPath$binPath
  # set exec path
  ep=$newFullPath$binPath
  $ep"/05.js_compile.pl > /dev/null"
  
  echo "*** Compiling CSS and publishing files"
  $ep"/06.css_compile.pl"
  $ep"/08.Increment_files.py"
    
  echo "*** Removing old symlink and creating new one"
  # remove old link and link newFullPath
  rm -fr $livePath
  ln -s $newFullPath $livePath
  
  echo "*** LIVE DEPLOYED-"
fi

###
### Go for the beta, checkout the git command to fit your own needs
###
if [ "$ref" = "$beta" ]
then
  echo "*** next branch pushed. Deploying on staging site"

  cd $betaPath
  env -i git reset --hard
  ### Secure environment after the reset
  echo $envPHPbeta > $betaPath$envFile

  env -i git pull grid beta
  ### Secure environment after the pull
  echo $envPHPbeta > $betaPath$envFile

  ### Make post-update executable, git repo's hook is linked
  ### to this file
  chmod a+x $betaPath$postUpdate

  echo "*** STAGING DEPLOYED"

fi

##

